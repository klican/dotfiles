runtime bundle/vim-pathogen/autoload/pathogen.vim
call pathogen#infect()

"if has('gui_running')
"    set background=light
"else
"    set background=dark
"endif
colorscheme wombat

filetype plugin on
filetype plugin indent on "Turn on file type detection
set shiftwidth =4 " The '>>' and '<<' command will indent by 4 spaces
set cindent
set nocompatible "turn off backward compatibility with the historic vi editor
set t_Co=256
syntax enable
autocmd Filetype tex setlocal nofoldenable
"colorscheme wombat
set nocompatible
set hidden "Handle multiple buffers better
set linebreak
set ruler "Show cursor position
set number "Show line numbers
set ignorecase "Ignore case when searching
set smartcase  "but case-sensitive if expression contais a capital letter

"This jumps to the middle of the actual line
map gm :call cursor(0, virtcol('$')/2)<CR>
set hlsearch "Highlight search things
set incsearch "Highlight searched string as it's typed 
set backspace=indent,eol,start "bez tohto bs maže znaky iba z aktuálne napísaného textu
set scrolloff=2
nmap <silent> <C-n> <Esc>:call ToggleHLSearch()<CR> 
"Hovewer don't know exactly what previous line does :)

set wildmenu "Enhanced command line completion
set wildmode=list:longest "Complete files like a shell

set mouse=a	   "Enable the use of the mouse
set showcmd 	   
"zobrazuje priebezne zadavany prikaz (prinosne hl. pri viacznakovych prikazoch ako napr qg})


"set showmatch 	"zapíšete-li pravou závorku, ukáže vám k ní příslušející levou (krátce na ni poskočí kurzorem a zase se vrátí); hodně užitečné třeba pro TeXovské texty, které se hemží závorkami
set textwidth=74 "Zadáte-li nenulovou hodnotu, bude Vim „hlídat“ pravý okraj a kdykoli dojde k jeho překročení, přesune při psaní aktuální slovo na začátek nového řádku.
 
" Smart mappings on the command line
cno $h e ~/
cno $d e ~/Desktop/
cno $w e ~/writings/
cno $j e ./
cno $c e <C-\>eCurrentFileDir("e")<cr>
" $q is super useful when browsing on the command line
cno $q <C-\>eDeleteTillSlash()<cr>

set spelllang=sk
"set spell
"Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

function NERDTreeToggle()
  execute ":NERDTreeToggle"
endfunction
command -nargs=0 NERDTreeToggle :call NERDTreeToggle()
nmap \nt :NERDTreeToggle<CR>

function NERDTreeClose()
  execute ":NERDTreeClose"
endfunction
command -nargs=0 NERDTreeClose :call NERDTreeClose()
nmap \ntc :NERDTreeClose<CR>

silent! call repeat#set("\<Plug>MyWonderfulMap", v:count) "initialize the repeat.vim

" Use ranger as vim file manager:
"When <leader>r is pressed, ranger is launched with RANGER_RETURN_FILE
"environment variable set to a temporary file name. After ranger quits, the
"selected filename is read from the temporary file, and vim opens it.
function! Ranger()
    " Get a temp file name without creating it
    let tmpfile = substitute(system('mktemp -u'), '\n', '', '')
    " Launch ranger, passing it the temp file name
    silent exec '!RANGER_RETURN_FILE='.tmpfile.' ranger'
    " If the temp file has been written by ranger
    if filereadable(tmpfile)
        " Get the selected file name from the temp file
        let filetoedit = system('cat '.tmpfile)
        exec 'edit '.filetoedit
        call delete(tmpfile)
    endif
    redraw!
endfunction
nmap <leader>r :call Ranger()<cr>


 " Autocomplete already-existing words in the file with tab (extremely useful!)
function InsertTabWrapper()
      let col = col('.') - 1
      if !col || getline('.')[col - 1] !~ '\k'
          return "\<tab>"
      else
          return "\<c-p>"
      endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr> 
" duh, ignore this garbage made by the website:</cr></c-r></tab></c-p></tab>

""___________________________________""
"" Below goes experimental settings: ""
"""""""""""""""""""""""""""""""""""""""
if has("vms")
  set nobackup          " do not keep a backup file, use versions instead
else
  set backup            " keep a backup file
endif

" Don't use Ex mode, use Q for formatting
map Q gq
set formatoptions +=2
set endofline

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

set clipboard=unnamed ""doesn't need to type "* (like in "*p), when using clipboard
